# Task ID: 7
# Title: Profile setup API and page
# Status: pending
# Dependencies: 2, 3, 6
# Priority: high
# Description: Build /profile-setup page and POST /api/profile/complete to capture photo, bio, and location preferences.
# Details:
- UI: Create NEW Next.js page at app/profile-setup/page.tsx using Chakra+Tailwind form patterns from reference_files/frontend_reference/FAF_website/app with React Hook Form + Zod.
- Implement single photo upload, bio (≤ 400 chars), slider for radius (1-50mi, default 20mi), location capture (HTML Geolocation + fallback manual city).
- Create storage/photo_upload.ts helper using Supabase Storage signed upload flow pattern from reference_files/frontend_reference/FAF_website for photo storage; enforce image/* mime type and ≤5MB size.
- Implement POST /api/profile/complete in src/api/profile_routes.py OR extend src/main.py following FastAPI route style in reference_files/src/main.py to validate input (zod), write to user_profiles and user_locations.
- Add privacy toggle for location to allow approximate location (city centroid) if exact not shared.
- On successful submission, redirect to /find-buddy and return {ready_for_matching:true}.
<info added on 2025-08-11T03:42:31.899Z>
## Backend (FastAPI) Best Practices
- Define request model with nested `location` type (e.g., `class LocationData(BaseModel): lat: float; lng: float; city: Optional[str]`)
- Validate lat/lng ranges (-90 to 90 for latitude, -180 to 180 for longitude)
- Use `BackgroundTasks` parameter for post-processing images or metadata after response is sent

## Frontend Best Practices
- Disable Link prefetch for forms where POST redirects by setting `prefetch={false}` to avoid stale cache issues
- Implement optimistic UI updates but rely on server response for confirmation
- For the redirect after form submission, ensure proper cache invalidation

## Caching Considerations
- POST endpoint should call `revalidatePath('/find-buddy')` to ensure fresh data after profile completion
- Alternatively, implement tag-based invalidation on profile read endpoints

## Security Measures
- Validate max bio length server-side (≤400 chars) in addition to client-side validation
- Sanitize all user input server-side to prevent XSS and injection attacks
- Enforce Row-Level Security (RLS) in Supabase to ensure users can only access their own profile data
</info added on 2025-08-11T03:42:31.899Z>

# Test Strategy:
- API unit tests for validation and storage writes.
- E2E test in tests/e2e/profile_setup.spec.ts: complete setup and verify redirect to find-buddy.
- Security: verify upload uses signed URL limited to image/* mime type and 5MB size.
- Test city-only mode stores city + centroid only (no precise lat/lng).

# Subtasks:
## 1. Create Next.js profile-setup page with Chakra+Tailwind [pending]
### Dependencies: None
### Description: Create a new page at app/profile-setup/page.tsx using form patterns from reference files
### Details:
Implement Chakra UI form with fields for photo upload, bio, radius slider, and location capture following patterns in reference_files/frontend_reference/FAF_website/app

## 2. Implement React Hook Form with Zod validation [pending]
### Dependencies: None
### Description: Set up form validation for bio, radius, and location fields following patterns in reference_files/frontend_reference/FAF_website/app
### Details:
Implement validation rules: bio ≤ 400 chars, radius between 1-50 miles, and proper location format

## 3. Implement photo upload with Supabase Storage [pending]
### Dependencies: None
### Description: Create storage/photo_upload.ts helper using signed upload flow pattern from reference_files/frontend_reference/FAF_website for secure image uploads
### Details:
Enforce mime type image/* and size ≤5MB in the signed upload implementation

## 4. Create FastAPI route for profile completion [pending]
### Dependencies: None
### Description: Implement POST /api/profile/complete in src/api/profile_routes.py or extend src/main.py following style in reference_files/src/main.py
### Details:
Handle {photo_url, bio, location{lat,lng|city}, max_travel_miles} and persist to user_profiles + user_locations tables; return {ready_for_matching:true}

## 5. Implement location privacy toggle [pending]
### Dependencies: None
### Description: Add option to store only city and centroid coordinates instead of precise location
### Details:
When privacy toggle is enabled, store only city name and city centroid coordinates instead of precise lat/lng

## 6. Add location capture with privacy options [pending]
### Dependencies: None
### Description: Implement HTML Geolocation with fallback to manual city entry and option for approximate location
### Details:
Use HTML Geolocation API with fallback to manual city entry; implement privacy toggle for using city centroid instead of precise coordinates

## 7. Implement redirect to find-buddy page [pending]
### Dependencies: None
### Description: Add redirect to /find-buddy after successful profile completion
### Details:
On successful form submission and API response, redirect user to /find-buddy page

## 8. Create E2E test for profile setup flow [pending]
### Dependencies: None
### Description: Implement tests/e2e/profile_setup.spec.ts to verify the complete profile setup flow
### Details:
Test the full flow from form completion to API submission and redirect

